diff --git a/drivers/i2s/i2s_mcux_sai.c b/drivers/i2s/i2s_mcux_sai.c
index a6982a055ca..6a68848aa0d 100644
--- a/drivers/i2s/i2s_mcux_sai.c
+++ b/drivers/i2s/i2s_mcux_sai.c
@@ -30,7 +30,8 @@
 #include <fsl_edma.h>
 
 #include <zephyr/logging/log.h>
-LOG_MODULE_REGISTER(dev_i2s_mcux, CONFIG_I2S_LOG_LEVEL);
+//LOG_MODULE_REGISTER(dev_i2s_mcux, CONFIG_I2S_LOG_LEVEL);
+LOG_MODULE_REGISTER(dev_i2s_mcux, LOG_LEVEL_DBG);
 
 #define NUM_DMA_BLOCKS_RX_PREP 3
 #if defined(CONFIG_DMA_MCUX_EDMA)
@@ -544,24 +545,32 @@ static int i2s_mcux_config(const struct device *dev, enum i2s_dir dir,
 		goto invalid_config;
 	}
 
+    /*TB: default is kSAI_ModeAsync so it remains unchanged if I2S_DIR_BOTH, maybe not valid?*/
 	/* sync mode configurations */
 	if (dir == I2S_DIR_TX) {
 		config.syncMode = dev_cfg->tx_sync_mode;
+		LOG_DBG("TX sync mode: %d (0=Async/Master, 1=Sync/Slave)", config.syncMode);
 	} else if (dir == I2S_DIR_RX) {
 		config.syncMode = dev_cfg->rx_sync_mode;
+		LOG_DBG("RX sync mode: %d (0=Async/Master, 1=Sync/Slave)", config.syncMode);
 	}
 
 	bool frame_clk_slave = i2s_cfg->options & I2S_OPT_FRAME_CLK_SLAVE;
 	bool bit_clk_slave = i2s_cfg->options & I2S_OPT_BIT_CLK_SLAVE;
 
+    /* TB its set to master by default */
 	if (frame_clk_slave && bit_clk_slave) {
 		config.masterSlave = kSAI_Slave;
+		LOG_DBG("Master/Slave: Slave (both clocks slave)");
 	} else if (frame_clk_slave && !bit_clk_slave) {
 		config.masterSlave = kSAI_Bclk_Master_FrameSync_Slave;
+		LOG_DBG("Master/Slave: BCLK Master, FS Slave");
 	} else if (!frame_clk_slave && bit_clk_slave) {
 		config.masterSlave = kSAI_Bclk_Slave_FrameSync_Master;
+		LOG_DBG("Master/Slave: BCLK Slave, FS Master");
 	} else {
 		config.masterSlave = kSAI_Master;
+		LOG_DBG("Master/Slave: Master (generates both clocks)");
 	}
 
 	/* clock signal polarity */
@@ -638,8 +647,14 @@ static int i2s_mcux_config(const struct device *dev, enum i2s_dir dir,
 		/* set bit clock divider */
 		SAI_RxSetConfig(base, &config);
 		dev_data->rx.start_channel = config.startChannel;
-		SAI_RxSetBitClockRate(base, mclk, i2s_cfg->frame_clk_freq, word_size_bits,
-				      i2s_cfg->channels);
+		/* Only set bit clock rate for RX if not in sync mode (slave to TX) */
+		if (dev_cfg->rx_sync_mode == kSAI_ModeAsync) {
+			SAI_RxSetBitClockRate(base, mclk, i2s_cfg->frame_clk_freq, word_size_bits,
+					      i2s_cfg->channels);
+			LOG_DBG("RX: Set bit clock rate (async mode)");
+		} else {
+			LOG_DBG("RX: Skip bit clock rate setting (sync mode - using TX clocks)");
+		}
 		LOG_DBG("rx start_channel = %d", dev_data->rx.start_channel);
 		/*set up dma settings*/
 		dev_data->rx.dma_cfg.source_data_size = word_size_bytes;
