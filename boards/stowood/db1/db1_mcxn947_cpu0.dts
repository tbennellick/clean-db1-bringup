/dts-v1/;

#include <nxp/nxp_mcxn94x.dtsi>
#include "db1-pinctrl.dtsi"
#include <zephyr/dt-bindings/i2c/i2c.h>
#include <zephyr/dt-bindings/input/input-event-codes.h>

#include <zephyr/dt-bindings/adc/adc.h>
#include <zephyr/dt-bindings/adc/mcux-lpadc.h>

/ {
	model = "NXP FRDM_N94 board";
	compatible = "nxp,mcxn947", "nxp,mcx";
	cpus {
		/delete-node/ cpu@1;
	};

	chosen {
		zephyr,sram = &sram0;
		zephyr,flash = &flash;
		zephyr,flash-controller = &fmu;
		zephyr,code-partition = &slot0_partition;
		zephyr,uart-mcumgr = &flexcomm4_lpuart4;
		zephyr,console = &flexcomm4_lpuart4;
		zephyr,shell-uart = &flexcomm4_lpuart4;
		zephyr,code-cpu1-partition = &slot1_partition;
		zephyr,display = &st7789v;
	};

	aliases{
		led0 = &debug_led_0;
		led1 = &debug_led_1;
		led2 = &debug_led_2;
		led3 = &debug_led_3;

		user-red = &red_led;
		user-green = &green_led;
		user-blue = &blue_led;
		power-ven-sys-base = &power_ven_sys_base;
		power-ven-storage = &power_ven_storage;
		power-ven-ble = &power_ven_ble;
		power-ven-sys = &power_ven_sys;
		power-ven-bat = &power_ven_bat;

		rip-en = &rip_en;
		exg-nrst = &exg_nrst;
		exg-clksel = &exg_clksel;
		exg-npwdn = &exg_npwdn;
		//		exg-cs-temp = &exg_cs_temp;
		exg-cs-temp = &debug_led_3;
		exg-start-conv = &exg_start_conv;

		modem-uart = &flexcomm6_lpuart6;
		modem-reset = &modem_reset;
		modem-on = &modem_on;

		hs-usb-sel = &hs_usb_sel;
		backlight = &backlight;
		display-reset = &display_reset;
		emmc-reset = &emmc_reset;

		sw0 = &user_button_2;
		sw1 = &user_button_3;
		sdhc0 = &usdhc0;
		mcuboot-button0 = &user_button_2;

		watchdog0 = &wwdt0;
//		pwm-0 = &flexpwm1_pwm0;
//		pwm-1 = &sc_timer;
		rtc = &rtc;
		temp-adc = &temp_adc_channel;
	};
	leds {
		compatible = "gpio-leds";
		debug_led_0: dbg_0 {
			gpios = <&gpio4 12 GPIO_ACTIVE_LOW>;
			label = "Debug LED 0";
		};
		debug_led_1: dbg_1 {
			gpios = <&gpio4 13 GPIO_ACTIVE_LOW>;
			label = "Debug LED 1";
		};
		debug_led_2: dbg_2 {
			gpios = <&gpio4 16 GPIO_ACTIVE_LOW>;
			label = "Debug LED 2";
		};
		debug_led_3: dbg_3 {
			gpios = <&gpio4 15 GPIO_ACTIVE_LOW>;
			label = "Debug LED 3";
		};

		red_led: red {
			gpios = <&gpio3 18 GPIO_ACTIVE_LOW>;
			label = "Red LED";
		};
		green_led: green {
			gpios = <&gpio3 19 GPIO_ACTIVE_LOW>;
			label = "Green LED";
		};
		blue_led: blue {
			gpios = <&gpio2 10 GPIO_ACTIVE_LOW>;
			label = "Blue LED";
		};

		power_ven_sys_base: power_ven_sys_base {
			gpios = <&gpio5 8 GPIO_ACTIVE_HIGH>;
			label = "Power V_EN_SYS_BASE";
		};
		power_ven_storage: power_ven_storage {
			gpios = <&gpio1 22 GPIO_ACTIVE_HIGH>;
			label = "Power V_EN_STORAGE";
		};
		power_ven_ble: power_ven_ble {
			gpios = <&gpio1 23 GPIO_ACTIVE_HIGH>;
			label = "Power V_EN_BLE";
		};
		power_ven_sys: power_ven_sys {
			gpios = <&gpio2 11 GPIO_ACTIVE_HIGH>;
			label = "Power V_EN_SYS";
		};
		power_ven_bat: power_ven_bat {
			gpios = <&gpio0 7 GPIO_ACTIVE_HIGH>;
			label = "Power V_EN_BAT";
		};
		rip_en: rip_en {
			gpios = <&gpio1 2 GPIO_ACTIVE_HIGH>;
			label = "RIP_EN";
		};
		exg_nrst: exg_nrst {
			gpios = <&gpio0 11 GPIO_ACTIVE_HIGH>;
			label = "EXG_nRST";
		};
		exg_clksel: exg_clksel {
			gpios = <&gpio0 9 GPIO_ACTIVE_HIGH>;
			label = "EXG_CLKSEL";
		};
		exg_npwdn: exg_npwdn {
			gpios = <&gpio0 13 GPIO_ACTIVE_HIGH>;
			label = "EXG_nPWDN";
		};
		exg_cs_temp: exg_cs_temp { /* This shouold be passed to driver via device tree */
		gpios = <&gpio3 5 GPIO_ACTIVE_HIGH>;
			label = "EXG_CS_TEMP";
		};
		exg_start_conv: exg_start_conv {
			gpios = <&gpio1 10 GPIO_ACTIVE_HIGH>;
			label = "EXG_START_CONV";
		};
		modem_reset: modem_reset { /* Assert to reset */
		gpios = <&gpio4 17 GPIO_ACTIVE_HIGH>;
			label = "modem Reset";
		};
		modem_on: modem_on { /* Assert to power on */
		gpios = <&gpio4 19 GPIO_ACTIVE_LOW>;
			label = "modem Power Enable";
		};
		hs_usb_sel: hs_usb_sel {
			gpios = <&gpio1 16 GPIO_ACTIVE_HIGH>;
			label = "HS USB Mux Select";
		};
		backlight: backlight {
			gpios = <&gpio3 12 GPIO_ACTIVE_HIGH>;
			label = "Display Backlight";
		};
		display_reset: display_reset {
			gpios = <&gpio4 7 GPIO_ACTIVE_LOW>;
			label = "Display Reset";
		};
		emmc_reset: emmc_reset {
			gpios = <&gpio1 17 GPIO_ACTIVE_LOW>;
			label = "eMMC Reset";
		};
	};

	gpio_keys {
		compatible = "gpio-keys";
		user_button_2: button_0 {
			label = "User SW2";
			gpios = <&gpio0 15 GPIO_ACTIVE_LOW>;
			zephyr,code = <INPUT_KEY_0>;
		};
		user_button_3: button_1 {
			label = "User SW3";
			gpios = <&gpio3 1 GPIO_ACTIVE_LOW>;
			zephyr,code = <INPUT_KEY_1>;
		};
	};

	mipi_dbi {
		compatible = "zephyr,mipi-dbi-spi";
		dc-gpios = <&gpio4 22 GPIO_ACTIVE_HIGH>;
		reset-gpios = <&gpio4 7 GPIO_ACTIVE_LOW>;   /* Reset pin for MIPI DBI */
		spi-dev = <&flexcomm5_lpspi5>;
		write-only;
		#address-cells = <1>;
		#size-cells = <0>;

		st7789v: st7789v@0 {
			compatible = "sitronix,st7789v";
			mipi-max-frequency = <20000000>;
			reg = <0>;
			width = <240>;
			height = <320>;
			x-offset = <0>;
			y-offset = <0>;
			vcom = <0x2b>;
			gctrl = <0x35>;
			vrhs = <0x11>;
			vdvs = <0x20>;
			mdac = <0x00>; //this is MADCTL
			gamma = <0x01>;/* IC default, not specced in display DS */
			inversion-off;  /* Disable display inversion */
			colmod = <0x55>; /* Match CONFIG_ST7789V_RGB565*/
			lcm = <0x2c>;
			porch-param = [0c 0c 00 33 33];
			cmd2en-param = [5a 69 02 01];
			pwctrl1-param = [a4 a1];
			pvgam-param = [D0 00 05 0E 15 0D 37 43 47 09 15 12 16 19];
			nvgam-param = [D0 00 05 0D 0C 06 2D 44 40 0E 1C 18 16 19];
			ram-param = [00 F0];
			rgb-param = [CD 08 14]; //sample value
			//rgb-param = [40 02 14]; // default value
			mipi-mode = "MIPI_DBI_MODE_SPI_4WIRE";
		};
	};

	zephyr,user {
		io-channels = <&lpadc0 0>;
	};

};



/*
 * Default for this board is to allocate SRAM0-5 to cpu0 but the
 * application can have an application specific device tree to
 * allocate the SRAM0-7 differently.
 *
 * For example, SRAM0-6 could be allocated to cpu0 with only SRAM7
 * for cpu1. This would require the value of sram0 to have a DT_SIZE_K
 * of 384. You would have to make updates to cpu1 sram settings as well.
 */
&sram0 {
	compatible = "mmio-sram";
	reg = <0x20000000 DT_SIZE_K(320)>;
};

&sram {
	sramg: memory@20050000 {
		compatible = "mmio-sram";
		reg = <0x20050000 DT_SIZE_K(64)>;
	};
	sramh: memory@20060000 {
		compatible = "mmio-sram";
		reg = <0x20060000 DT_SIZE_K(32)>;
	};
};


&mbox {
	status = "okay";
};

&gpio0 {
	status = "okay";
};

&gpio1 {
	status = "okay";
};

&gpio2 {
	status = "okay";
};

&gpio3 {
	status = "okay";
};

&gpio4 {
	status = "okay";
};

&gpio5 {
	status = "okay";
};

//&green_led {
//	status = "okay";
//};
//
//&red_led {
//	status = "okay";
//};
//
&user_button_2 {
	//	status = "okay";
};

&edma0 {
	status = "okay";
};

&flexcomm1 {
	status = "okay";
};

&flexcomm1_lpspi1 {
	pinctrl-0 = <&pinmux_flexcomm1_lpspi>;
	pinctrl-names = "default";
	status = "okay";
	lsm6dso: lsm6dso@0 {
		compatible = "st,lsm6dso";
		status = "okay";
		reg = <0x0>;
		irq-gpios = <&gpio0 20 GPIO_ACTIVE_LOW>;
		spi-max-frequency = <1000000>; /* Can go higher */
		accel-pm = <0>; /* Normal mode */
		accel-range = <0>; /* 2g */
		accel-odr = <1>; /* 12.5Hz */
	};
};
&flexcomm2 {
	status = "disabled";
};

&flexcomm2_lpi2c2 {
	status = "disabled";
};

&flexcomm2_lpuart2 {
	status = "disabled";
};

&flexcomm3 {
	status = "okay";
};

&flexcomm3_lpi2c3 {
	status = "okay";
	pinctrl-0 = <&pinmux_flexcomm3_lpi2c>;
	pinctrl-names = "default";
	clock-frequency = <I2C_BITRATE_STANDARD>;

	bq27421@55 {
		compatible = "ti,bq274xx";
		reg = <0x55>;
		design-voltage = <3700>;
		design-capacity = <1800>;
		taper-current = <45>;
		terminate-voltage = <3000>;
	};
	veml6030@10 {
		compatible = "vishay,veml6030";
		reg = <0x10>;
		status = "okay";
		label = "Ambient Light Sensor";
		/*int-gpios = <&gpio1 15 (GPIO_PULL_UP | GPIO_ACTIVE_LOW)>;*/
	};
	audio_codec: max9867@18{
		compatible = "maxim,max9867";
		reg = <0x18>;
		/* Ideally mclk would come via clock control api but that is missing for this clock,
		on this MCU at the moment, so it will fall back to the default. */
		mclk-default = <12288000>;
		clocks = <&syscon MCUX_AUDIO_MCLK>; /* once MCX clock controll api is fixed */
		clock-names = "mclk";
	};
};



&flexcomm4 {
	status = "okay";
};

/* Debug Uart*/
&flexcomm4_lpuart4 {
	status = "okay";
	current-speed = <1000000>;
	pinctrl-0 = <&pinmux_flexcomm4_lpuart>;
	pinctrl-names = "default";
};
&flexcomm5 {
	status = "okay";
};

&flexcomm5_lpspi5 {
	pinctrl-0 = <&pinmux_flexcomm5_lpspi>;
	pinctrl-names = "default";
	status = "okay";
	//cs-gpios = <&gpio1 7 GPIO_ACTIVE_LOW>;  /* CS pin for display */
};

&flexcomm6 {
	status = "okay";
};

&flexcomm6_lpuart6 {
	status = "okay";
	current-speed = <115200>;
	hw-flow-control;
	pinctrl-0 = <&pinmux_flexcomm6_lpuart>;
	pinctrl-names = "default";
	/*
	modem: modem {
		   compatible = "u-blox,lara-r6";
		   mdm-power-gpios = <&gpio4 19 GPIO_ACTIVE_LOW>;
		   mdm-reset-gpios = <&gpio4 17 GPIO_ACTIVE_LOW>;
		   status = "okay";
		};
	*/
};
&flexcomm7 {
	status = "okay";
};

&flexcomm7_lpspi7 {
	pinctrl-0 = <&pinmux_flexcomm7_lpspi>;
	pinctrl-names = "default";
	status = "okay";
	/* CS must remain low for the entire duration of the serial communication. */
	/* After the serial communication is finished, always wait four or more tCLK periods before taking CS high.*/
	/* That is 4*514e-9 = 2.056us*/
	pcs-sck-delay = <2500>; //Delay in nanoseconds from the chip select assert to the first clock

	/* The chip select must be deasserted at least 4 tCLK periods after the last clock edge. */
	/* That is 4*514e-9 = 2.056us */
	sck-pcs-delay = <2500>; //Delay in nanoseconds from the last clock edge to the chip select

	/* Gap between last clock of each word must be more than tsdecode 9.5.2.9 */
	/* if CLK is 2.048 MHz, then tSDECODE (4 × tCLK) is 2.056 µs. */
	transfer-delay = <2500>; //Delay in nanoseconds between last SCK edge of a transfer word and the first SCK edge of the next transfer word.
	ads1298: ads1298@0 {
		compatible = "ti,ads1298_i2s";
		status = "okay";
		reg = <0x0>;
		spi-max-frequency = <10000000>; /* Can go higher */
		clksel-gpios = <&gpio0 9 GPIO_ACTIVE_HIGH>;
		nrst-gpios = <&gpio0 11 GPIO_ACTIVE_HIGH>;
		npwdn-gpios = <&gpio0 13 GPIO_ACTIVE_HIGH>;
		start-conv-gpios = <&gpio1 10 GPIO_ACTIVE_HIGH>;
		drdy-gpios = <&gpio1 11 GPIO_ACTIVE_LOW>;
		sample-rate = <250>;
		channels = <8>;
	};

};


//&flexcomm7_lpi2c7 {
//	status = "okay";
//};

&flexcomm8 {
	status = "okay";
};

&flexcomm8_lpspi8 {
	pinctrl-0 = <&pinmux_flexcomm8_lpspi>;
	pinctrl-names = "default";
	status = "okay";
	pcs-sck-delay = <2800>; //Delay in nanoseconds from the chip select assert to the first clock (DS=2.5us)
	sck-pcs-delay = <150>; //Delay in nanoseconds from the last clock edge to the chip select (DS=100ns)
	//	transfer-delay = <2500>; //Delay in nanoseconds between last SCK edge of a transfer word and the first SCK edge of the next transfer word.

	abp2s: abp2s@0 {
		compatible = "honeywell,abp2s";
		status = "okay";
		reg = <0x0>;
		spi-max-frequency = <200000>; /* Can go higher */
		min-pressure-millipsi = <0>;
		max-pressure-millipsi = <1000>;
	};

};



&flexspi {
	status = "okay";
	pinctrl-0 = <&pinmux_flexspi>;
	pinctrl-names = "default";
	ahb-prefetch;
	ahb-bufferable;
	ahb-cacheable;
	ahb-read-addr-opt;
	combination-mode;
	rx-clock-source = <1>;

	/* WINBOND flash memory*/
	w25q64jvssiq: w25q64jvssiq@0 {
		compatible = "nxp,imx-flexspi-nor";
		status = "disabled";
		size = <67108864>;
		reg = <0>;
		spi-max-frequency = <133000000>;
		jedec-id = [ef 40 17];
		erase-block-size = <4096>;
		write-block-size = <1>;
		cs-interval-unit = <1>;
		cs-interval = <2>;
		cs-hold-time = <3>;
		cs-setup-time = <3>;
		data-valid-time = <2>;
		column-space = <0>;
	};
};

&w25q64jvssiq {
	status = "okay";
	partitions {
		compatible = "fixed-partitions";
		#address-cells = <1>;
		#size-cells = <1>;
		storage_partition: partition@0 {
			label = "storage";
			reg = <0x0 DT_SIZE_M(8)>;
		};
	};
};

&dac0 {
	status = "disabled";
};
&enet {
	status = "disabled";
};

&enet_mac {
	status = "disabled";
};

&enet_mdio {
	status = "disabled";
};

&wwdt0 {
	status = "okay";
};

&flexpwm1_pwm0 {
	status = "disabled";
//	pinctrl-0 = <&pinmux_flexpwm1_pwm0>;
//	pinctrl-names = "default";
};
&flexpwm1_pwm1 {
	status = "disabled";
};
&flexpwm1_pwm2 {
	status = "disabled";
};

&flexcan0 {
	status = "disabled";
//	pinctrl-0 = <&pinmux_flexcan0>;
//	pinctrl-names = "default";
};

/* This is actually configured directly via HAL to allow triggering */
&ctimer0 {
	status = "okay";
//	prescale = < 0x0 >;
};

&usdhc0 {
	status = "okay";
	pinctrl-0 = <&pinmux_usdhc0>;
	pinctrl-1 = <&pinmux_usdhc0>;
	pinctrl-2 = <&pinmux_usdhc0>;
	pinctrl-names = "default", "slow", "med";
	no-1-8-v;
	/delete-property/ cd-gpios; // Remove card detect to free PIO2_1 for D4
	pwr-gpios = <&gpio1 22 GPIO_ACTIVE_HIGH>; // eMMC power enable pin
	//	pwr-gpios = <&gpio1 17 GPIO_ACTIVE_LOW>; // eMMC reset pin
	power-delay-ms = <200>;
	/* eMMC - embedded storage */
	emmc {
		//				compatible = "zephyr,sdmmc-disk";
		compatible = "zephyr,mmc-disk";
		disk-name = "SD2";
		status = "okay";
	};
	/* Disable the original SD card disk */
	/delete-node/ sdmmc;
};

&vref {
	status = "okay";
};

&lpadc0 {
	status = "okay";
	pinctrl-0 = <&pinmux_lpadc0>;
	pinctrl-names = "default";
	#address-cells = <1>;
	#size-cells = <0>;

	/* this gets passed via "user space" rather than via the drvier in the normal way */
	temp_adc_channel: channel@0 {
		reg = <0>;
		zephyr,gain = "ADC_GAIN_1";
		zephyr,reference = "ADC_REF_EXTERNAL1";
		zephyr,acquisition-time = <ADC_ACQ_TIME_DEFAULT>;
		zephyr,resolution = <16>;
		zephyr,vref-mv = <1800>;
		zephyr,input-positive = <MCUX_LPADC_CH3A>;
	};
};



zephyr_udc0: &usb1 {
	status = "okay";
	phy-handle = <&usbphy1>;
};

&usbphy1 {
	status = "okay";
	tx-d-cal = <4>;
	tx-cal-45-dp-ohms = <7>;
	tx-cal-45-dm-ohms = <7>;
};

&lpcmp0 {
	status = "disabled";
};

&lptmr0 {
	status = "okay";
};

&i3c1 {
	status = "disabled";
//	pinctrl-0 = <&pinmux_i3c1>;
//	pinctrl-names = "default";
};

&flexio0 {
	status = "okay";
};

&mrt0_channel0 {
	status = "okay";
};

&rtc {
	status = "okay";
};

&sc_timer {
	status = "disabled"; // has a pin on sdhc bus
//	pinctrl-0 = <&pinmux_sctimer>;
//	pinctrl-names = "default";
};


&sai1 {
	status = "okay";
	pinctrl-0 = <&pinmux_sai1>;
	pinctrl-names = "default";
	/* PLL1 is clock source and this is setup in board.c */
	pre-div = <1>;
	podf = <19>;
	clock-mux = <0>;

	/* SAI Configuration for Simultaneous TX/RX Operation */
	/* Configure RX as async (Master to TX and generate bclk and sync) */
	//	nxp,rx-sync-mode; /* property present = kSAI_ModeSync */

	/* Configure TX as synchronous (Slave to RX bclk and sync) */
	nxp,tx-sync-mode; 	/* TX to follow RX (use bclk and sync)*/
};


&sai0 {
	status = "disabled";
};

/* TODO Is this in use? */
&smartdma {
	status = "okay";
	program-mem = <0x4000000>;
	//	video_sdma: video-sdma {
	//		status = "okay";
	//		compatible = "nxp,video-smartdma";
	//		pinctrl-0 = <&pinmux_smartdma_camera>;
	//		pinctrl-names = "default";
	////		sensor = <&ov7670>;
	//		vsync-pin = <4>;
	//		hsync-pin = <11>;
	//		pclk-pin = <5>;
	//	};
};


/*
 * MCXN947 board uses OS timer as the kernel timer
 * In case we need to switch to SYSTICK timer, then
 * replace &os_timer with &systick
 */
&os_timer {
	status = "disabled";
};

&systick {
	status = "okay";
};

&flash {
	partitions {
		compatible = "fixed-partitions";
		#address-cells = <1>;
		#size-cells = <1>;

		/*
		 * Partition sizes must be aligned
		 * to the flash memory sector size of 8KB.
		 */
		boot_partition: partition@0 {
			label = "mcuboot";
			reg = <0x00000000 DT_SIZE_K(80)>;
		};
		/* For the MCUBoot "upgrade only" method,
		 * the slot sizes must be equal.
		 */
		slot0_partition: partition@14000 {
			label = "image-0";
			reg = <0x00014000 DT_SIZE_K(984)>;
		};
		slot1_partition: partition@10A000 {
			label = "image-1";
			reg = <0x0010A000 DT_SIZE_K(984)>;
		};
		/* storage_partition is placed in WINBOND flash memory*/
	};
};
