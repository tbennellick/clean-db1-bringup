#!/usr/bin/env python3
"""
Simple Image to C Array Converter
Uses only standard Python libraries with basic PPM support

Usage:
    python simple_img2c.py input.ppm output_name
    
For other formats, first convert to PPM:
    convert input.png output.ppm
    python simple_img2c.py output.ppm my_image
"""

import sys
import os

def read_ppm(filename):
    """Read a PPM (P6) image file"""
    with open(filename, 'rb') as f:
        # Read header
        magic = f.readline().decode().strip()
        if magic != 'P6':
            raise ValueError("Only PPM P6 format supported")
        
        # Skip comments
        line = f.readline().decode().strip()
        while line.startswith('#'):
            line = f.readline().decode().strip()
        
        # Read width and height
        width, height = map(int, line.split())
        
        # Read max value
        max_val = int(f.readline().decode().strip())
        if max_val != 255:
            raise ValueError("Only 8-bit PPM supported")
        
        # Read pixel data
        data = f.read()
        
        return width, height, data

def rgb888_to_rgb565(r, g, b):
    """Convert 24-bit RGB to 16-bit RGB565"""
    r = (r >> 3) & 0x1F  # 5 bits
    g = (g >> 2) & 0x3F  # 6 bits
    b = (b >> 3) & 0x1F  # 5 bits
    return (r << 11) | (g << 5) | b

def convert_to_rgb565(width, height, rgb_data):
    """Convert RGB888 data to RGB565 little-endian"""
    rgb565_data = []
    
    for i in range(0, len(rgb_data), 3):
        r = rgb_data[i]
        g = rgb_data[i + 1] 
        b = rgb_data[i + 2]
        
        rgb565 = rgb888_to_rgb565(r, g, b)
        
        # Little endian (LSB first)
        rgb565_data.append(rgb565 & 0xFF)
        rgb565_data.append((rgb565 >> 8) & 0xFF)
    
    return rgb565_data

def generate_c_files(data, width, height, var_name):
    """Generate C source and header files"""
    
    # Generate C file
    c_filename = f"{var_name}.c"
    with open(c_filename, 'w') as f:
        f.write(f"""/*
 * Generated by simple_img2c.py
 * Image: {width}x{height} pixels  
 * Format: RGB565 (little endian)
 * Size: {len(data)} bytes
 */

#include <stdint.h>

const uint8_t {var_name}[] = {{
""")
        
        # Write data in rows of 12 bytes
        for i in range(0, len(data), 12):
            row = data[i:i+12]
            hex_data = ', '.join(f'0x{byte:02x}' for byte in row)
            f.write(f"  {hex_data}")
            if i + 12 < len(data):
                f.write(",")
            f.write("\n")
        
        f.write("};\n\n")
        f.write(f"const uint16_t {var_name}_width = {width};\n")
        f.write(f"const uint16_t {var_name}_height = {height};\n")
        f.write(f"const uint32_t {var_name}_size = {len(data)};\n")
    
    # Generate header file
    h_filename = f"{var_name}.h"
    guard_name = f"{var_name.upper()}_H"
    
    with open(h_filename, 'w') as f:
        f.write(f"""/*
 * Generated by simple_img2c.py
 * Header file for {var_name}
 */

#ifndef {guard_name}
#define {guard_name}

#include <stdint.h>

extern const uint8_t {var_name}[];
extern const uint16_t {var_name}_width;
extern const uint16_t {var_name}_height;
extern const uint32_t {var_name}_size;

#define {var_name.upper()}_WIDTH {var_name}_width
#define {var_name.upper()}_HEIGHT {var_name}_height
#define {var_name.upper()}_SIZE {var_name}_size

// RGB565 helper macros
#define RGB565(r,g,b) (((r & 0x1F) << 11) | ((g & 0x3F) << 5) | (b & 0x1F))

#endif /* {guard_name} */
""")
    
    print(f"Generated: {c_filename} and {h_filename}")
    print(f"Image: {width}x{height}, Size: {len(data)} bytes")

def main():
    if len(sys.argv) != 3:
        print("Usage: python simple_img2c.py input.ppm output_name")
        print("\nTo convert other formats to PPM:")
        print("  convert input.png output.ppm")
        print("  python simple_img2c.py output.ppm my_image")
        sys.exit(1)
    
    ppm_file = sys.argv[1]
    var_name = sys.argv[2]
    
    try:
        # Read PPM file
        width, height, rgb_data = read_ppm(ppm_file)
        
        # Convert to RGB565
        rgb565_data = convert_to_rgb565(width, height, rgb_data)
        
        # Generate C files
        generate_c_files(rgb565_data, width, height, var_name)
        
    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)

if __name__ == '__main__':
    main()