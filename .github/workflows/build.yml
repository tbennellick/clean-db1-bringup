name: Build FW

env:
  PRIMARY_IMAGE: ghcr.io/stowood/fedora-zephyr:f42_0.17.1-rc1-2 # Private to Stowood but Colocated so quick
  FALLBACK_IMAGE: bennellickeng/fedora-zephyr:f42_0.17.1-rc1-2 # Public but slower so available on dev repos

on: [push]
jobs:
  coding_standard:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check code style
        id: format_check
        uses: jidicula/clang-format-action@v4.15.0
        continue-on-error: true # TODO: Remove once all files are formatted
        with:
          clang-format-version: "20"

  select-image:
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      packages: "read"
    outputs:
      image: ${{ steps.select-image.outputs.image }}
    steps:
      # We have to explicitly login. container: below does this for us normally.
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Select image
        id: select-image
        run: |
          if docker manifest inspect ${{ env.PRIMARY_IMAGE }} > /dev/null 2>&1; then
            echo "::notice::Using primary image: ${{ env.PRIMARY_IMAGE }}"
            echo "image=${{ env.PRIMARY_IMAGE }}" >> $GITHUB_OUTPUT
          else
            echo "::warning::Primary image unavailable, falling back to ${{ env.FALLBACK_IMAGE }}"
            echo "image=${{ env.FALLBACK_IMAGE }}" >> $GITHUB_OUTPUT
          fi

  build:
    needs: select-image
    runs-on: ubuntu-latest
    container: ${{ needs.select-image.outputs.image }}
    permissions:
      contents: "read"
      id-token: "write"
      packages: "read"
    env:
      CMAKE_PREFIX_PATH: /opt/zephyr-sdk
      BUILD_DIR: build/

    steps:
      - name: Show container info
        run: |
          echo "::notice::Container image: ${{ needs.select-image.outputs.image }}"
          uname -a

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Workaround actions/cache relative path
        run: |
          echo "workspace_path=$(realpath ..)" >> $GITHUB_ENV

      - name: Cache zephyr
        uses: actions/cache@v4
        with:
          path: ${{ env.workspace_path }}/zephyr
          key: zephyr-${{ hashFiles('west.yml') }}
          restore-keys: |
            zephyr-

      - name: Cache modules
        uses: actions/cache@v4
        with:
          path: ${{ env.workspace_path }}/modules
          key: modules-${{ hashFiles('west.yml') }}
          restore-keys: |
            modules-

      # grant access to the private bfp_common_sw repo
      - name: Configure SSH for private repos
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_BFP_COMMON_SW }}

      - name: Add GitHub to known hosts
        run: |
          mkdir -p /root/.ssh
          echo "github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl" >> /root/.ssh/known_hosts
          echo "github.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCj7ndNxQowgcQnjshcLrqPEiiphnt+VTTvDP6mHBL9j1aNUkY4Ue1gvwnGLVlOhGeYrnZaMgRK6+PKCUXaDbC7qtbW8gIkhL7aGCsOr/C56SJMy/BCZfxd1nWzAOxSDPgVsmerOBYfNqltV9/hWCqBywINIR+5dIg6JTJ72pcEpEjcYgXkE2YEFXV1JHnsKgbLWNlhScqb2UmyRkQyytRLtL+38TGxkxCflmO+5Z8CSSNY7GidjMIZ7Q4zMjA2n1nGrlTDkzwDCsw+wqFPGQA179cnfGWOWRVruj16z6XyvxvjJwbz0wQZ75XK5tKSb7FNyeIEs4TT4jk+S4dhPeAUC5y+bDYirYgM4GC7uEnztnZyaVWQ7B381AK4Qdrwt51ZqExKbQpTUNn+EjqoTwvqNj4kqx5QUCI0ThS/YkOxJCXmPUWZbhjpCg56i+2aB6CmK2JGhn57K5mj0MNdBXA4/WnwH6XoPWJzK5Nyu2zB3nAZp+S5hpQs+p1vN1/wsjk=" >> /root/.ssh/known_hosts
          echo "github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=" >> /root/.ssh/known_hosts

#      - name: Verify SSH setup
#        run: |
#          ssh-add -l
#          ssh -T git@github.com || true
#          echo "HOME: $HOME"
#          echo "Current user: $(whoami)"
#          echo "SSH_AUTH_SOCK: $SSH_AUTH_SOCK"
#          ssh-add -l
#          ls -la ~/.ssh/ || echo "~/.ssh doesn't exist"
#          ls -la /root/.ssh/ || echo "/root/.ssh doesn't exist"
#          ssh -vT git@github.com 2>&1 || true

      - name: Mark git repo as not dubious ownership
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
          # Without this, git commands during the build fail.

      - name: Name the build
        id: step_one
        run: |
          short_hash=$(git rev-parse --short HEAD)
          echo "build_name=$(date -Iseconds | tr ':' '.')_${short_hash}" >> "$GITHUB_ENV"

      # If this step fails, it may be because there are no tags in the repo. (git tag v0.0.0)
      # It is used in the build and here to flush out later issues that are harder to debug.
      - name: Git Describe
        run: |
          git describe --tags --dirty --abbrev=7

      - name: Set up repo, dependencies and toolchain
        run: |
          source scripts/setup_env.sh

      - name: Get board revisions
        id: get-revisions
        run: |
          revisions=$(python3 scripts/list_revisions.py)
          echo "revisions=$revisions" >> "$GITHUB_OUTPUT"
          echo "Revisions: $revisions"

      - name: Build firmware for all revisions
        run: |
          for revision in ${{ steps.get-revisions.outputs.revisions }}; do
            echo "::group::Building revision $revision"
            scripts/build.py --revision "$revision" --pristine
            echo "::endgroup::"
          done

      - name: Pack Firmware
        run: |
          tar cJf "${build_name}.tar" ${{ env.BUILD_DIR }}
          mkdir bins
          for revision in ${{ steps.get-revisions.outputs.revisions }}; do     
               cp ${{ env.BUILD_DIR }}/db1@${revision}/mcxn947/cpu0/app/zephyr/zephyr.elf bins/"${build_name}_${revision}.db1-bu-zephyr.elf"
          done
          ls -l bins

      - name: Archive firmware
        uses: actions/upload-artifact@v4
        with:
          name: db1-bu-firmware-${{ env.build_name }}
          path: |
            ${{ env.build_name }}.tar
            bins/*
          if-no-files-found: error

      - name: Dump on Failure
        if: failure()
        run: |
          tree /__w/
          tree ~
      - name: Pack Firmware on failure
        if: failure()
        run: |
          tar cJf "fail-${{ env.build_name }}.tar" ${{ env.BUILD_DIR }}

      - name: Archive build on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: firmware
          path: |
            fail-${{ env.build_name }}.tar
          if-no-files-found: error
