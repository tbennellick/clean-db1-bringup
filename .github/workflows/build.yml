name: Build FW

on: [push]
jobs:
  coding_standard:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check code style
        id: format_check
        uses: jidicula/clang-format-action@v4.15.0
        continue-on-error: true # TODO: Remove once all files are formatted
        with:
          clang-format-version: "20"

  build:
    runs-on: ubuntu-latest
    container: bennellickeng/fedora-zephyr:f42_0.17.1-rc1-2
    permissions:
      contents: "read"
      id-token: "write"
    env:
      CMAKE_PREFIX_PATH: /opt/zephyr-sdk
      BUILD_DIR: build/

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Workaround actions/cache relative path
        run: |
          echo "workspace_path=$(realpath ..)" >> $GITHUB_ENV

      - name: Cache zephyr
        uses: actions/cache@v4
        with:
          path: ${{ env.workspace_path }}/zephyr
          key: zephyr-${{ hashFiles('west.yml') }}
          restore-keys: |
            zephyr-

      - name: Cache modules
        uses: actions/cache@v4
        with:
          path: ${{ env.workspace_path }}/modules
          key: modules-${{ hashFiles('west.yml') }}
          restore-keys: |
            modules-

      - name: Mark git repo as not dubious ownership
        run: |
          git config --global --add safe.directory $GITHUB_WORKSPACE
          # Without this, git commands during the build fail.

      - name: Name the build
        id: step_one
        run: |
          short_hash=$(git rev-parse --short HEAD)
          echo "build_name=$(date -Iseconds | tr ':' '.')_${short_hash}" >> "$GITHUB_ENV"

      # If this step fails, it may be because there are no tags in the repo. (git tag v0.0.0)
      # It is used in the build and here to flush out later issues that are harder to debug.
      - name: Git Describe
        run: |
          git describe --tags --dirty --abbrev=7

      - name: Set up repo, dependencies and toolchain
        run: |
          source scripts/setup_env.sh

      - name: Get board revisions
        id: get-revisions
        run: |
          revisions=$(python3 scripts/list_revisions.py)
          echo "revisions=$revisions" >> "$GITHUB_OUTPUT"
          echo "Revisions: $revisions"

      - name: Build firmware for all revisions
        run: |
          for revision in ${{ steps.get-revisions.outputs.revisions }}; do
            echo "::group::Building revision $revision"
            scripts/build.py --revision "$revision" --pristine
            echo "::endgroup::"
          done

      - name: Pack Firmware
        run: |
          tar cJf "${build_name}.tar" ${{ env.BUILD_DIR }}
          mkdir bins
          for revision in ${{ steps.get-revisions.outputs.revisions }}; do     
               cp ${{ env.BUILD_DIR }}/db1@${{ revision }}/mcxn947/cpu0/app/zephyr/zephyr.elf bins/"${build_name}_${{revision}}.db1-bu-zephyr.elf"
          done
          ls -l bins
          #  build/*/mcxn947/cpu0/app/

#      - name: Archive firmware
#        uses: actions/upload-artifact@v4
#        with:
#          name: db1-bu-firmware-${{ env.build_name }}
#          path: |
#            ${{ env.build_name }}.tar
#            ${{ env.BUILD_DIR }}/zephyr/zephyr.*
#            ${{ env.build_name }}.db1-bu-zephyr.elf
#          if-no-files-found: error
#
      - name: Dump on Failure
        if: failure()
        run: |
          tree /__w/

      - name: Pack Firmware on failure
        if: failure()
        run: |
          tar cJf "fail-${{ env.build_name }}.tar" ${{ env.BUILD_DIR }}

      - name: Archive build on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: firmware
          path: |
            fail-${{ env.build_name }}.tar
          if-no-files-found: error
